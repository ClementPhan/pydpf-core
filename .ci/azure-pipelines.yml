# azure pipelines build and test pymapdl

variables:
  ALLOW_PLOTTING: true
  package_name: ansys-dpf-core
  SHELLOPTS: 'errexit:pipefail'

trigger:
  branches:
    include:
    - '*'
    exclude:
    - gh-pages
  tags:
    include:
    - '*'

pr:
  branches:
    exclude:
    - '*'

jobs:
- job: Windows
  variables:
    python.version: '3.8'
    DISPLAY: ':99.0'
    PYANSYS_OFF_SCREEN: True
    DPF_PORT: 32772
    DPF_START_SERVER: False
  pool:
    vmImage: 'windows-2019'

  steps:
    - powershell: |
        powershell .ci/install_opengl.ps1
        .ci/setup_headless_display.sh
        pip install -r .ci/requirements_test_xvfb.txt
        python .ci/display_test.py
      displayName: Install and start a virtual framebuffer

    - task: UsePythonVersion@0
      inputs:
        versionSpec: $(python.version)
        addToPath: true

    - task: PipAuthenticate@1
      inputs:
        artifactFeeds: 'pyansys'
        onlyAddExtraIndex: true

    - script: |
        pip install -r requirements_build.txt
        python setup.py bdist_wheel
        pip install --find-links=dist ansys_dpf_core
        cd tests
        python -c "from ansys.dpf import core; print(core.Report(gpu=False))"
      displayName: Install ansys-dpf-core

    - task: UniversalPackages@0
      inputs:
        command: 'download'
        downloadDirectory: '$(System.DefaultWorkingDirectory)'
        feedsToUse: 'internal'
        vstsFeed: '705e121a-9631-49f5-8aaf-c7142856f923'
        vstsFeedPackage: 'dpf-windows' #TODO: update hash of packages
        vstsPackageVersion: '21.2.0'

    - script: |
        @echo on
        dir $(System.DefaultWorkingDirectory)
        set THISDIR=$(System.DefaultWorkingDirectory)
        cd %THISDIR%\server\v212\aisol\bin\winx64
        START /B Ans.Dpf.Grpc.bat --address 127.0.0.1 --port %DPF_PORT% > log.txt 2>&1
        python -c "from ansys.dpf import core; core.connect_to_server(port=$(DPF_PORT)); print('Python Connected')"
      displayName: Start DPF Server

    - script: |
        pip install -r requirements_test.txt
        cd tests
        pytest -v --junitxml=junit/test-results.xml --cov ansys.dpf.core --cov-report=xml
      displayName: Test Core API

    - script: |
        type $(System.DefaultWorkingDirectory)\server\v212\aisol\bin\winx64\log.txt
      displayName:  'Show DPF Server Logs'
      condition: always()

- job: Linux
  variables:
    python.version: '3.7'  # due to VTK 8.1.2 requirement for docbuild
    DISPLAY: ':99.0'
    PYANSYS_OFF_SCREEN: True
    DPF_PORT: 32772
    DPF_START_SERVER: False
  pool:
    vmImage: 'ubuntu-20.04'
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(python.version)'
      displayName: 'Use Python $(python.version)'

    - task: PipAuthenticate@1
      inputs:
        artifactFeeds: 'pyansys'
        onlyAddExtraIndex: true

    - script: |
        .ci/setup_headless_display.sh
        pip install -r .ci/requirements_test_xvfb.txt
        python .ci/display_test.py
      displayName: Install and start a virtual framebuffer

    - script: |
        pip install -r requirements_build.txt
        python setup.py bdist_wheel
        pip install --find-links=dist ansys_dpf_core
        cd tests
        python -c "from ansys.dpf import core; print(core.Report())"
      displayName: Install ansys-dpf-core

    - task: UniversalPackages@0
      inputs:
        command: 'download'
        downloadDirectory: '$(System.DefaultWorkingDirectory)'
        feedsToUse: 'internal'
        vstsFeed: '705e121a-9631-49f5-8aaf-c7142856f923'
        vstsFeedPackage: 'dpf-linux' #TODO: update hash of packages
        vstsPackageVersion: '21.2.0'

    - script: |
        export THISDIR=$(System_DefaultWorkingDirectory)
        echo $(THISDIR)
        cd $(THISDIR)/server/v212/aisol/bin/linx64
        ./Ans.Dpf.Grpc.sh --port 50054 > log.txt 2>&1
        python -c "from ansys.dpf import core; core.connect_to_server(port=50054)); print('Python Connected')"
      displayName: Start DPF Server
      
    - script: |
        pip install -r requirements_test.txt
        pip install pytest-azurepipelines
        cd tests
        pytest -v --junitxml=junit/test-results.xml --cov ansys.dpf.core --cov-report=xml --cov-report=html
      displayName: Test Core API

    - script: |
        pip install twine
        python setup.py sdist
        twine upload --skip-existing dist/*
      displayName: 'Upload to PyPi'
      condition: contains(variables['Build.SourceBranch'], 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: $(PYPI_TOKEN)
        TWINE_REPOSITORY_URL: "https://upload.pypi.org/legacy/"
