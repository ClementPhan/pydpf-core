
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-mapdl-run\00-mapdl_run_basic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-mapdl-run_00-mapdl_run_basic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-mapdl-run_00-mapdl_run_basic.py:


.. _ref_mapdl_run_basic:

Use Mapdl run and get basic results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to make an Mapdl solve and 
how to get the corresponding results. 

Here we suppose that server and client are both 
on the same machine (the executable of the client machine is 
called).

.. GENERATED FROM PYTHON SOURCE LINES 16-17

Import dpf module 

.. GENERATED FROM PYTHON SOURCE LINES 17-26

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops
    from ansys.dpf.core.help import norm, min_max
    import matplotlib.pyplot as plt

    import os








.. GENERATED FROM PYTHON SOURCE LINES 27-30

Run Mapdl
=========
Call mapdl::run operator 

.. GENERATED FROM PYTHON SOURCE LINES 30-33

.. code-block:: default


    mapld_run = dpf.Operator("mapdl::run")








.. GENERATED FROM PYTHON SOURCE LINES 34-35

Get dataSources and connect it to the mapdl::run operator

.. GENERATED FROM PYTHON SOURCE LINES 35-39

.. code-block:: default


    data_sources = dpf.DataSources(examples.cyclic_dat)
    mapld_run.inputs.data_sources.connect(data_sources)








.. GENERATED FROM PYTHON SOURCE LINES 40-41

get the executable path and connect it to the operator

.. GENERATED FROM PYTHON SOURCE LINES 41-50

.. code-block:: default


    ansys_path = dpf.misc.find_ansys()
    if os.name == 'nt':
        executable = os.path.join("winx64", "ansys2021R2.exe")
    elif os.name == 'posix':
        executable = os.path.join("linx64", "ansys2021r2")
    executable_path = os.path.join(ansys_path, "ansys", "bin", executable)
    mapld_run.inputs.mapdl_exe_path(executable_path)








.. GENERATED FROM PYTHON SOURCE LINES 51-52

Run the operator to get the result file path as output

.. GENERATED FROM PYTHON SOURCE LINES 52-55

.. code-block:: default


    rst_data_sources = mapld_run.outputs.data_sources()








.. GENERATED FROM PYTHON SOURCE LINES 56-59

Read results
============
Create a model from result data sources

.. GENERATED FROM PYTHON SOURCE LINES 59-62

.. code-block:: default


    model = dpf.Model(rst_data_sources)








.. GENERATED FROM PYTHON SOURCE LINES 63-64

Read metadata

.. GENERATED FROM PYTHON SOURCE LINES 64-71

.. code-block:: default


    time_freq_support = model.metadata.time_freq_support
    time_freq_support.n_sets

    mesh =model.metadata.meshed_region
    elements = mesh.elements








.. GENERATED FROM PYTHON SOURCE LINES 72-73

Elemental nodal stress

.. GENERATED FROM PYTHON SOURCE LINES 73-87

.. code-block:: default


    s = model.results.stress()
    fcS = s.outputs.fields_container()

    min_max_op = ops.min_max.min_max()
    min_max_op.inputs.field.connect(fcS[0])

    min = min_max_op.outputs.field_min()
    max =  min_max_op.outputs.field_max()

    print(min.data)
    print(max.data)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-1.98710356e+16 -2.05984506e+16 -4.56080816e+16 -8.35644943e+15
     -2.39735754e+16 -4.52839501e+15]
    [1.98710356e+16 2.05984506e+16 4.56080816e+16 8.35644943e+15
     7.91763477e+15 4.52839501e+15]




.. GENERATED FROM PYTHON SOURCE LINES 88-89

Nodal stress

.. GENERATED FROM PYTHON SOURCE LINES 89-103

.. code-block:: default

    s = model.results.stress()
    s.inputs.requested_location("Nodal")
    fcS = s.outputs.fields_container()

    min_max_op= ops.min_max.min_max()
    min_max_op.inputs.field.connect(fcS[0])

    min = min_max_op.outputs.field_min()
    max =  min_max_op.outputs.field_max()

    print(min.data)
    print(max.data)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-1.98710356e+16 -2.05984506e+16 -4.56080816e+16 -8.35644943e+15
     -2.39735754e+16 -4.52839501e+15]
    [1.98710356e+16 2.05984506e+16 4.56080816e+16 8.35644943e+15
     7.91763477e+15 4.52839501e+15]




.. GENERATED FROM PYTHON SOURCE LINES 104-105

Displacement

.. GENERATED FROM PYTHON SOURCE LINES 105-113

.. code-block:: default


    u = model.results.displacement()

    fcU = u.outputs.fields_container()

    mesh.plot(fcU[0])





.. image:: /examples/03-mapdl-run/images/sphx_glr_00-mapdl_run_basic_001.png
    :alt: 00 mapdl run basic
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(0.0045037823816948715, 0.0055237823816948715, 0.007964564184694871),
     (0.0, 0.00102, 0.0034607818030000003),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.796 seconds)


.. _sphx_glr_download_examples_03-mapdl-run_00-mapdl_run_basic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-mapdl_run_basic.py <00-mapdl_run_basic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-mapdl_run_basic.ipynb <00-mapdl_run_basic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
