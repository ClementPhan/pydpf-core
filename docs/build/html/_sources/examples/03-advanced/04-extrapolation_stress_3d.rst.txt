
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-advanced\04-extrapolation_stress_3d.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-advanced_04-extrapolation_stress_3d.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-advanced_04-extrapolation_stress_3d.py:


.. _extrapolation_test_stress_3Delement:

Extrapolation Method for stress result of 3D-element
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to compute the nodal components stress from Gaussian points (integration points) for 3D-element by using the method of extrapolation.
Extrapolating results available at Gauss or quadrature points to nodal points for a field or fields container. The available elements are : linear quadrangle, parabolic quadrangle, linear hexagonal, quadratic hexagonal, linear tetrahedral, quadratic tetrahedral. 

1st step : get the data source's analyse of integration points(this file was add the commands APDL "EREXS, NO").

2nd step: using operator of extrapolation to compute the nodal stress.

3rd step: get nodal stress result from data source's analyse reference. The analyse was computed by ANSYS Mechanical APDL.

4th step: compare the results between nodal stress from data source ref and nodal stress computed by Extrapolation Method.

.. GENERATED FROM PYTHON SOURCE LINES 18-24

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators 









.. GENERATED FROM PYTHON SOURCE LINES 25-26

Get the data source's analyse of integration points and data source's analyse reference

.. GENERATED FROM PYTHON SOURCE LINES 26-46

.. code-block:: default

    datafile= examples.download_extrapolation_3d_result()

    # integration points (Gaussian points)
    data_integration_points=datafile['file_integrated']
    data_sources_integration_points = dpf.DataSources(data_integration_points)

    # reference
    dataSourceref=datafile['file_ref']
    data_sources_ref = dpf.DataSources(dataSourceref)

    # get the mesh 
    model = dpf.Model(data_integration_points)
    mesh = model.metadata.meshed_region

    # operator instantiation scoping
    op_scoping = dpf.operators.scoping.split_on_property_type() # operator instantiation
    op_scoping.inputs.mesh.connect(mesh)
    op_scoping.inputs.requested_location.connect("Elemental")
    mesh_scoping = op_scoping.outputs.mesh_scoping()








.. GENERATED FROM PYTHON SOURCE LINES 47-50

Extrapolation from integration points for stress result
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
In this example we compute nodal component stress result from integration points's stress by using operator gauss_to_node_fc

.. GENERATED FROM PYTHON SOURCE LINES 50-56

.. code-block:: default


    # Create stress operator to get stress result of integration points
    stressop=dpf.operators.result.stress()
    stressop.inputs.data_sources.connect(data_sources_integration_points)
    stress=stressop.outputs.fields_container()








.. GENERATED FROM PYTHON SOURCE LINES 57-61

Nodal stress result of integration points: 
##############################################################################
 The command "ERESX,NO" in Mechanical APDL is used to copy directly the gaussian (integration) points results to the nodes, instead of the results at nodes or elements (which are interpolation of results at a few gauss points).
 The following plot shows the nodal values which are the averaged values of stresses at each node. The value shown at the node is the average of the stresses from the gaussian points of each element that it belongs to. 

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    # plot
    stress_nodal_op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
    stress_nodal_op.inputs.fields_container.connect(stress)
    mesh.plot(stress_nodal_op.outputs.fields_container())





.. image:: /examples/03-advanced/images/sphx_glr_04-extrapolation_stress_3d_001.png
    :alt: 04 extrapolation stress 3d
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(0.03601102928212831, 0.0437960292821283, 0.03601102928212831),
     (0.0, 0.007785, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 69-70

Create operator gauss_to_node_fc and compute nodal component stress by applying Extrapolation Method

.. GENERATED FROM PYTHON SOURCE LINES 70-79

.. code-block:: default


    ex_stress = dpf.operators.averaging.gauss_to_node_fc()
    # connect mesh
    ex_stress.inputs.mesh.connect(mesh)
    # connect fields container stress
    ex_stress.inputs.fields_container.connect(stress)
    # get output
    fex=ex_stress.outputs.fields_container()








.. GENERATED FROM PYTHON SOURCE LINES 80-82

Stress result of reference ANSYS Workbench
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 82-89

.. code-block:: default


    # Stress from file dataSourceref
    stressop_ref=dpf.operators.result.stress()
    stressop_ref.inputs.data_sources.connect(data_sources_ref)
    stressop_ref.inputs.mesh_scoping.connect(mesh_scoping)
    stress_ref=stressop_ref.outputs.fields_container()








.. GENERATED FROM PYTHON SOURCE LINES 90-93

Plot
~~~~~~~~~~
 Showing plots of Extrapolation's stress result and reference's stress result

.. GENERATED FROM PYTHON SOURCE LINES 93-103

.. code-block:: default


    # extrapolation
    fex_nodal_op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
    fex_nodal_op.inputs.fields_container.connect(fex)
    mesh.plot(fex_nodal_op.outputs.fields_container())
    # reference
    stress_ref_nodal_op = dpf.operators.averaging.elemental_nodal_to_nodal_fc()
    stress_ref_nodal_op.inputs.fields_container.connect(stress_ref)
    mesh.plot(stress_ref_nodal_op.outputs.fields_container())




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /examples/03-advanced/images/sphx_glr_04-extrapolation_stress_3d_002.png
          :alt: 04 extrapolation stress 3d
          :class: sphx-glr-multi-img

    *

      .. image:: /examples/03-advanced/images/sphx_glr_04-extrapolation_stress_3d_003.png
          :alt: 04 extrapolation stress 3d
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(0.03601102928212831, 0.0437960292821283, 0.03601102928212831),
     (0.0, 0.007785, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 104-110

Comparison
~~~~~~~~~~~~
 Compare the stress result computed by extrapolation and reference's result.
 Check if two fields container are identical. 
 Maximum tolerance gap between to compared values: 1e-2.
 Smallest value which will be considered during the comparison step : all the abs(values) in field less than 1e-8 is considered as null

.. GENERATED FROM PYTHON SOURCE LINES 110-117

.. code-block:: default


    # operator AreFieldsIdentical_fc
    op = dpf.operators.logic.identical_fc()
    op.inputs.fields_containerA.connect(fex)
    op.inputs.fields_containerB.connect(stress_ref)
    op.inputs.tolerance.connect(1.0e-8)
    op.inputs.small_value.connect(0.01)
    op.outputs.boolean()



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    True




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.311 seconds)


.. _sphx_glr_download_examples_03-advanced_04-extrapolation_stress_3d.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 04-extrapolation_stress_3d.py <04-extrapolation_stress_3d.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 04-extrapolation_stress_3d.ipynb <04-extrapolation_stress_3d.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
