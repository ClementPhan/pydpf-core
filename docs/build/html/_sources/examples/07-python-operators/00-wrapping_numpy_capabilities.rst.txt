
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\07-python-operators\00-wrapping_numpy_capabilities.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_07-python-operators_00-wrapping_numpy_capabilities.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_07-python-operators_00-wrapping_numpy_capabilities.py:


.. _ref_wrapping_numpy_capabilities:

Write user defined Operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to create a simple DPF python plugin holding a single Operator.
This Operator called "easy_statistics" computes simple statistics quantities on a scalar Field with
the help of numpy.
It's a simple example displaying how routines can be wrapped in DPF python plugins.

.. GENERATED FROM PYTHON SOURCE LINES 13-21

Write Operator
--------------
To write the simplest DPF python plugins, a single python script is necessary.
An Operator implementation deriving from :class:`ansys.dpf.core.custom_operator.CustomOperatorBase`
and a call to :py:func:`ansys.dpf.core.custom_operator.record_operator` are the 2 necessary steps to create a plugin.
The "easy_statistics" Operator will take a Field in input and return the first quartile, the median,
the third quartile and the variance. The python Operator and its recording seat in the
file plugins/easy_statistics.py. This file is:

.. GENERATED FROM PYTHON SOURCE LINES 23-24

.. literalinclude:: plugins/easy_statistics.py

.. GENERATED FROM PYTHON SOURCE LINES 28-33

Load Plugin
-----------
Once a python plugin is written, it can be loaded with the function :py:func:`ansys.dpf.core.core.load_library`
taking as first argument the path to the directory of the plugin, as second argument ``py_`` + the name of
the python script, and as last argument the function's name used to record operators.

.. GENERATED FROM PYTHON SOURCE LINES 33-40

.. code-block:: default


    import os
    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples

    dpf.load_library(os.path.join(os.getcwd(), "..", "..", "docs", "source", "examples", "07-python-operators", "plugins"), "py_easy_statistics", "load_operators")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'py_easy_statistics successfully loaded'



.. GENERATED FROM PYTHON SOURCE LINES 41-42

Once the Operator loaded, it can be instantiated with:

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default


    new_operator = dpf.Operator("easy_statistics")








.. GENERATED FROM PYTHON SOURCE LINES 46-50

To use this new Operator, a workflow computing the norm of the displacement
is connected to the "easy_statistics" Operator.
Methods of the class ``easy_statistics`` are dynamically added thanks to the Operator's
specification defined in the plugin.

.. GENERATED FROM PYTHON SOURCE LINES 52-64

.. graphviz::

   digraph foo {
      graph [pad="0.5", nodesep="0.3", ranksep="0.3"]
      node [shape=box, style=filled, fillcolor="#ffcc00", margin="0"];
      rankdir=LR;
      splines=line;
      ds [label="ds", shape=box, style=filled, fillcolor=cadetblue2];
      ds -> displacement [style=dashed];
      displacement -> norm;
      norm -> easy_statistics;
   }

.. GENERATED FROM PYTHON SOURCE LINES 66-68

Use the Custom Operator
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 68-79

.. code-block:: default


    ds = dpf.DataSources(examples.static_rst)
    displacement = dpf.operators.result.displacement(data_sources=ds)
    norm = dpf.operators.math.norm(displacement)
    new_operator.inputs.connect(norm)


    print("first quartile is", new_operator.outputs.first_quartile())
    print("median is", new_operator.outputs.median())
    print("third quartile is", new_operator.outputs.third_quartile())
    print("variance is", new_operator.outputs.variance())




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    first quartile is 0.0
    median is 7.491665033689507e-09
    third quartile is 1.4276663319275634e-08
    variance is 3.054190175494998e-17





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.003 seconds)


.. _sphx_glr_download_examples_07-python-operators_00-wrapping_numpy_capabilities.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 00-wrapping_numpy_capabilities.py <00-wrapping_numpy_capabilities.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 00-wrapping_numpy_capabilities.ipynb <00-wrapping_numpy_capabilities.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
