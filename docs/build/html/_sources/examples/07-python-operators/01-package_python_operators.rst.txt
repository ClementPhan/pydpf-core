
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\07-python-operators\01-package_python_operators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_07-python-operators_01-package_python_operators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_07-python-operators_01-package_python_operators.py:


.. _ref_python_plugin_package:

Write user defined Operators as a package
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how more complex DPF python plugins of Operators can be created as standard python packages.
The benefits of writing packages instead of simple scripts are: componentization (split the code in several
python modules or files), distribution (with packages, standard python tools can be used to upload and
download packages) and documentation (READMEs, docs, tests and examples can be added to the package).

This plugin will hold 2 different Operators:
  - One returning all the scoping ids having data higher than the average
  - One returning all the scoping ids having data lower than the average

.. GENERATED FROM PYTHON SOURCE LINES 17-23

Write Operator
--------------
For this more advanced use case, a python package is created.
Each Operator implementation derives from :class:`ansys.dpf.core.custom_operator.CustomOperatorBase`
and a call to :py:func:`ansys.dpf.core.custom_operator.record_operator` records the Operators of the plugin.
The complete package looks like:

.. GENERATED FROM PYTHON SOURCE LINES 25-43

.. card:: average_filter_plugin

   .. dropdown:: __init__.py

      .. literalinclude:: plugins/average_filter_plugin/__init__.py

   .. dropdown:: operators.py

      .. literalinclude:: plugins/average_filter_plugin/operators.py

   .. dropdown:: operators_loader.py

      .. literalinclude:: plugins/average_filter_plugin/operators_loader.py

   .. dropdown:: common.py

      .. literalinclude:: plugins/average_filter_plugin/common.py


.. GENERATED FROM PYTHON SOURCE LINES 46-52

Load Plugin
-----------
Once a python plugin is written as a package, it can be loaded with the function
:py:func:`ansys.dpf.core.core.load_library` taking as first argument the path to the directory of the plugin,
as second argument "py_" + any name identifying the plugin,
and as last argument the function's name exposed in the __init__ file and used to record operators.

.. GENERATED FROM PYTHON SOURCE LINES 52-62

.. code-block:: default


    import os
    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples

    dpf.load_library(
        os.path.join(os.getcwd(), "..", "..", "docs", "source", "examples", "07-python-operators", "plugins", "average_filter_plugin"),
        "py_average_filter",
        "load_operators")





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    'py_average_filter successfully loaded'



.. GENERATED FROM PYTHON SOURCE LINES 63-64

Once the Plugin loaded, Operators recorded in the plugin can be used with:

.. GENERATED FROM PYTHON SOURCE LINES 64-67

.. code-block:: default


    new_operator = dpf.Operator("ids_with_data_lower_than_average")








.. GENERATED FROM PYTHON SOURCE LINES 68-72

To use this new Operator, a workflow computing the norm of the displacement
is connected to the "ids_with_data_lower_than_average" Operator.
Methods of the class ``ids_with_data_lower_than_average`` are dynamically added thanks to the Operator's
specification.

.. GENERATED FROM PYTHON SOURCE LINES 74-86

.. graphviz::

   digraph foo {
      graph [pad="0.5", nodesep="0.3", ranksep="0.3"]
      node [shape=box, style=filled, fillcolor="#ffcc00", margin="0"];
      rankdir=LR;
      splines=line;
      ds [label="ds", shape=box, style=filled, fillcolor=cadetblue2];
      ds -> displacement [style=dashed];
      displacement -> norm;
      norm -> ids_with_data_lower_than_average;
   }

.. GENERATED FROM PYTHON SOURCE LINES 88-90

Use the Custom Operator
-----------------------

.. GENERATED FROM PYTHON SOURCE LINES 90-101

.. code-block:: default


    ds = dpf.DataSources(examples.static_rst)
    displacement = dpf.operators.result.displacement(data_sources=ds)
    norm = dpf.operators.math.norm(displacement)
    new_operator.inputs.connect(norm)


    new_scoping = new_operator.outputs.scoping()
    print("scoping in was:", norm.outputs.field().scoping)
    print("----------------------------------------------")
    print("scoping out is:", new_scoping)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    scoping in was: DPF  Scoping: 
      with Nodal location and 81 entities

    ----------------------------------------------
    scoping out is: DPF  Scoping: 
      with Nodal location and 35 entities






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  2.305 seconds)


.. _sphx_glr_download_examples_07-python-operators_01-package_python_operators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-package_python_operators.py <01-package_python_operators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-package_python_operators.ipynb <01-package_python_operators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
