
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\01-basic_operators.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_01-basic_operators.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_01-basic_operators.py:


.. _ref_basic_operators_example:

Operators Overview
~~~~~~~~~~~~~~~~~~
Overview of the usage of operators in DPF.

Operators are primary method for interacting with and extracting
results.  Within DPF-Core, these operators are directly exposed with
the `Operators` class as well as wrapped within several other
convenience classes.

This example demonstrates how to work directly with operators and
compares it to wrapped approach.

For a full listing of all available operators, please see
:ref:`ref_dpf_operators_reference`.

.. GENERATED FROM PYTHON SOURCE LINES 20-24

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples








.. GENERATED FROM PYTHON SOURCE LINES 25-27

First, create a model object to establish a connection with an
example result file.

.. GENERATED FROM PYTHON SOURCE LINES 27-30

.. code-block:: default

    model = dpf.Model(examples.static_rst)
    print(model)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF Model
    ------------------------------
    DPF Result Info 
      Analysis: static 
      Physics Type: mecanic 
      Unit system: MKS: m, kg, N, s, V, A, degC 
      Available results: 
        U Displacement :nodal displacements 
        RF Force :nodal reaction forces 
        S Stress :element nodal component stresses 
        ENG_VOL Volume :element volume 
        ENG_SE Energy-stiffness matrix :element energy associated with the stiffness matrix 
        ENG_AHO Hourglass Energy :artificial hourglass energy 
        ENG_TH thermal dissipation energy :thermal dissipation energy 
        ENG_KE Kinetic Energy :kinetic energy 
        ENG_CO co-energy :co-energy (magnetics) 
        ENG_INC incremental energy :incremental energy (magnetics) 
        EPEL Strain :element nodal component elastic strains 
        BFE Temperature :element structural nodal temperatures 
    ------------------------------
    DPF  Meshed Region: 
      81 nodes 
      8 elements 
      Unit: m 
      With solid (3D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 1 
    Cumulative     Time (s)       LoadStep       Substep         
    1              1.000000       1              1               





.. GENERATED FROM PYTHON SOURCE LINES 31-38

Next, create a raw displacement operator ``"U"``.  Each operator
contains ``input`` and ``output`` pins that can be connected to
various sources, to include other operators.  This allows operators
to be "chained" to allow for highly efficient operations.

Here, we print out the available inputs and outputs of the
displacement operator.

.. GENERATED FROM PYTHON SOURCE LINES 38-43

.. code-block:: default

    disp_op = dpf.Operator('U')
    print(disp_op.inputs)
    print(disp_op.outputs)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Available inputs:
         -   mesh_scoping : ScopingsContainer, Scoping, optional
             Nodes or elements scoping required in output. the scoping's location
             indicates whether nodes or elements are asked. using scopings
             container enables to split the result fields container in domains
                             
         -   data_sources : DataSources
             Result file path container, used if no streams are set
                             
         -   streams_container : StreamsContainer, optional
             Result file container allowed to be kept open to cache data
                             
         -   mesh : MeshedRegion, MeshesContainer, optional
             Prevents from reading the mesh in the result files
                             
         -   time_scoping : Scoping, int, list, float, Field, optional
             Time/freq (use doubles or field), time/freq set ids (use ints or
             scoping) or time/freq step ids (use scoping with timefreq_steps
             location) required in output
                             
         -   fields_container : FieldsContainer, optional
             Fields container already allocated modified inplace
                             
         -   read_cyclic : Enum Dataprocessing::Ecyclicreading, int, optional
             If 0 cyclic symmetry is ignored, if 1 cyclic sector is read, if 2
             cyclic expansion is done, if 3 cyclic expansion is done and stages are
             merged (default is 1)
                             
         -   bool_rotate_to_global : bool, optional
             If true the field is rotated to global coordinate system (default
             true)               
                             

    Available outputs:
         -   fields_container    





.. GENERATED FROM PYTHON SOURCE LINES 44-49

Compute the Maximum Normalized Displacement
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Here, connect the input of the operator to the data sources
contained within the ``model`` object and then the maximum of the
norm of the operator to demonstrate how to chain various operators.

.. GENERATED FROM PYTHON SOURCE LINES 49-68

.. code-block:: default


    # connect to the data sources of the model
    disp_op.inputs.data_sources.connect(model.metadata.data_sources)

    # Create a field container norm operator and connect it to the
    # displacement operator to chain the operators.
    norm_op = dpf.Operator('norm_fc')
    norm_op.inputs.connect(disp_op.outputs)

    # create a field container min/max operator and connect it to the
    # output of the norm operator
    mm_op = dpf.Operator('min_max_fc')
    mm_op.inputs.connect(norm_op.outputs)

    # Finally, get the value of the maximum displacement
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF displacement_1.s Field
      Location: Nodal
      Unit: m
      1 entities 
      Data:1 components and 1 elementary data 

    [1.48153706e-08]




.. GENERATED FROM PYTHON SOURCE LINES 69-75

Wrapped Operators
~~~~~~~~~~~~~~~~~
The ``model.results`` property contains all the wrapped operators
available for a given result.  This is provided out of convenience
as not all operators may be available for a given result and it is
much easier to reference available operators by first running:

.. GENERATED FROM PYTHON SOURCE LINES 75-78

.. code-block:: default

    print(model.results)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF Result Info 
      Analysis: static 
      Physics Type: mecanic 
      Unit system: MKS: m, kg, N, s, V, A, degC 
      Available results: 
        U Displacement :nodal displacements 
        RF Force :nodal reaction forces 
        S Stress :element nodal component stresses 
        ENG_VOL Volume :element volume 
        ENG_SE Energy-stiffness matrix :element energy associated with the stiffness matrix 
        ENG_AHO Hourglass Energy :artificial hourglass energy 
        ENG_TH thermal dissipation energy :thermal dissipation energy 
        ENG_KE Kinetic Energy :kinetic energy 
        ENG_CO co-energy :co-energy (magnetics) 
        ENG_INC incremental energy :incremental energy (magnetics) 
        EPEL Strain :element nodal component elastic strains 
        BFE Temperature :element structural nodal temperatures 





.. GENERATED FROM PYTHON SOURCE LINES 79-80

Create the displacement operator directly from the ``results`` property

.. GENERATED FROM PYTHON SOURCE LINES 80-92

.. code-block:: default

    disp_op = model.results.displacement()

    # Out of convenience, the operators module contains available operators
    # Those operators can be created in chain to create a workflow in one line
    from ansys.dpf.core import operators
    mm_op = operators.min_max.min_max_fc(operators.math.norm_fc(disp_op))

    # Finally, get the value of the maximum displacement.
    field_max = mm_op.outputs.field_max()
    print(field_max)
    print(field_max.data)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF displacement_1.s Field
      Location: Nodal
      Unit: m
      1 entities 
      Data:1 components and 1 elementary data 

    [1.48153706e-08]




.. GENERATED FROM PYTHON SOURCE LINES 93-94

Plot the displacement

.. GENERATED FROM PYTHON SOURCE LINES 94-96

.. code-block:: default

    print(model.metadata.meshed_region.plot(disp_op.outputs.fields_container()))




.. image:: /examples/00-basic/images/sphx_glr_01-basic_operators_001.png
    :alt: 01 basic operators
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [(0.0729555495773441, 0.1029555495773441, 0.0729555495773441),
     (0.015, 0.045, 0.015),
     (0.0, 0.0, 1.0)]




.. GENERATED FROM PYTHON SOURCE LINES 97-102

Scripting operators syntax
~~~~~~~~~~~~~~~~~~~~~~~~~~
DPF is also providing a scripting syntax where knowing 
the operator "string name" is not mandatory. 
Here is a similar script as above using this syntax. 

.. GENERATED FROM PYTHON SOURCE LINES 104-106

Instead of using a model class instance, let's directly use a 
datasources object. The DataSources constructor input is a path. 

.. GENERATED FROM PYTHON SOURCE LINES 106-109

.. code-block:: default

    ds = dpf.DataSources(examples.static_rst)
    print(examples.static_rst)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    d:\ansysdev\dpf-python-core\ansys\dpf\core\examples\static.rst




.. GENERATED FROM PYTHON SOURCE LINES 110-111

Let's instantiate the operators and connect them together. 

.. GENERATED FROM PYTHON SOURCE LINES 111-119

.. code-block:: default


    disp_op = dpf.operators.result.displacement()
    disp_op.inputs.data_sources.connect(ds)
    norm_op = dpf.operators.math.norm_fc()
    norm_op.inputs.connect(disp_op.outputs)
    mm_op = dpf.operators.min_max.min_max_fc()
    mm_op.inputs.connect(norm_op.outputs)








.. GENERATED FROM PYTHON SOURCE LINES 120-121

Let's get the output and print the result data. 

.. GENERATED FROM PYTHON SOURCE LINES 121-123

.. code-block:: default


    field_max = mm_op.outputs.field_max()
    print(field_max.data)



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1.48153706e-08]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.180 seconds)


.. _sphx_glr_download_examples_00-basic_01-basic_operators.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-basic_operators.py <01-basic_operators.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-basic_operators.ipynb <01-basic_operators.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
