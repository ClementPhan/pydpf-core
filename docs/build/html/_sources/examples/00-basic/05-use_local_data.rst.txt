
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\00-basic\05-use_local_data.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_00-basic_05-use_local_data.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_00-basic_05-use_local_data.py:


.. _ref_use_local_data_example:

Bring Field's data locally to improve performances
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Using the as_local_field option allows to bring the server's
data locally and to work only on the local process before sending the data
updates to the server on one shot at the end.
Reducing the number of calls to the server is key to improve
performances.

.. GENERATED FROM PYTHON SOURCE LINES 12-18

.. code-block:: default

    import numpy as np

    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops








.. GENERATED FROM PYTHON SOURCE LINES 19-21

First, create a model object to establish a connection with an
example result file and then extract

.. GENERATED FROM PYTHON SOURCE LINES 21-26

.. code-block:: default

    model = dpf.Model(examples.download_multi_stage_cyclic_result())
    print(model)







.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    DPF Model
    ------------------------------
    DPF Result Info 
      Analysis: modal 
      Physics Type: mecanic 
      Unit system: MKS: m, kg, N, s, V, A, degC 
      Available results: 
        U Displacement :nodal displacements 
        S Stress :element nodal component stresses 
        EPEL Strain :element nodal component elastic strains 
        BFE Temperature :element structural nodal temperatures 
      With multi_stage cyclic symmetry on 2 stages
    ------------------------------
    DPF  Meshed Region: 
      3595 nodes 
      1557 elements 
      Unit: m 
      With solid (3D) elements
    ------------------------------
    DPF  Time/Freq Support: 
      Number of sets: 6 
    Cumulative     Frequency (Hz) LoadStep       Substep        Harmonic index  
    1              188.385357     1              1              0.000000        
    2              325.126418     1              2              0.000000        
    3              595.320548     1              3              0.000000        
    4              638.189511     1              4              0.000000        
    5              775.669703     1              5              0.000000        
    6              928.278013     1              6              0.000000        





.. GENERATED FROM PYTHON SOURCE LINES 27-32

Create the Workflow
~~~~~~~~~~~~~~~~~~~~
Create a simple workflow computing the principal stress on the skin
of the model. Principal stress maximul usually occurs on the skin of the 
model, computing results only on this skin allows to reduce data sizes

.. GENERATED FROM PYTHON SOURCE LINES 32-36

.. code-block:: default


    skin_op = ops.mesh.external_layer(model.metadata.meshed_region)
    skin_mesh = skin_op.outputs.mesh()








.. GENERATED FROM PYTHON SOURCE LINES 37-38

Plot the mesh skin

.. GENERATED FROM PYTHON SOURCE LINES 38-41

.. code-block:: default

    skin_mesh.plot()





.. image:: /examples/00-basic/images/sphx_glr_05-use_local_data_001.png
    :alt: 05 use local data
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(1.219394790046167, 1.289764203596167, 1.147514203596167),
     (0.07188058645000002, 0.14225, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 42-43

Compute the stress principal inveriants on the skin nodes only

.. GENERATED FROM PYTHON SOURCE LINES 43-55

.. code-block:: default

    stress_op = ops.result.stress(data_sources=model.metadata.data_sources)
    stress_op.inputs.requested_location.connect(dpf.locations.nodal)
    stress_op.inputs.mesh_scoping.connect(skin_op.outputs.nodes_mesh_scoping)


    principal_op = ops.invariant.principal_invariants_fc(stress_op)
    principal_stress_1 = principal_op.outputs.fields_eig_1()[0]
    principal_stress_2 = principal_op.outputs.fields_eig_2()[0]
    principal_stress_3 = principal_op.outputs.fields_eig_3()[0]










.. GENERATED FROM PYTHON SOURCE LINES 56-58

Manipulate data locally
~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 61-64

As an example, we will go over the fields, keep the largest invariant value
by node if the averaged value of invariants is large enough
Exploring data allows the user add his own custom needs easily

.. GENERATED FROM PYTHON SOURCE LINES 64-83

.. code-block:: default


    node_scoping_ids = principal_stress_1.scoping.ids
    threshold = 300000.

    field_to_keep = dpf.fields_factory.create_scalar_field(len(node_scoping_ids), location=dpf.locations.nodal)

    with field_to_keep.as_local_field() as f:
        with principal_stress_1.as_local_field() as s1:
            with principal_stress_2.as_local_field() as s2:
                with principal_stress_3.as_local_field() as s3:
                    for i,id in enumerate(node_scoping_ids):
                        d1 = abs(s1.get_entity_data_by_id(id))
                        d2 = abs(s2.get_entity_data_by_id(id))
                        d3 = abs(s3.get_entity_data_by_id(id))
                        if (d1+d2+d3)/3. > threshold :
                            d = max(d1,d2,d3)
                            f.append(d, id)









.. GENERATED FROM PYTHON SOURCE LINES 84-86

Plot the result field
~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 89-90

Plot the result field on the skin mesh

.. GENERATED FROM PYTHON SOURCE LINES 90-93

.. code-block:: default

    skin_mesh.plot(field_to_keep)





.. image:: /examples/00-basic/images/sphx_glr_05-use_local_data_002.png
    :alt: 05 use local data
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(1.219394790046167, 1.289764203596167, 1.147514203596167),
     (0.07188058645000002, 0.14225, 0.0),
     (0.0, 0.0, 1.0)]



.. GENERATED FROM PYTHON SOURCE LINES 94-96

Plot the initial invariants
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. GENERATED FROM PYTHON SOURCE LINES 96-103

.. code-block:: default


    skin_mesh.plot(principal_stress_1)
    skin_mesh.plot(principal_stress_2)
    skin_mesh.plot(principal_stress_3)
                    
                    




.. rst-class:: sphx-glr-horizontal


    *

      .. image:: /examples/00-basic/images/sphx_glr_05-use_local_data_003.png
          :alt: 05 use local data
          :class: sphx-glr-multi-img

    *

      .. image:: /examples/00-basic/images/sphx_glr_05-use_local_data_004.png
          :alt: 05 use local data
          :class: sphx-glr-multi-img

    *

      .. image:: /examples/00-basic/images/sphx_glr_05-use_local_data_005.png
          :alt: 05 use local data
          :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [(1.219394790046167, 1.289764203596167, 1.147514203596167),
     (0.07188058645000002, 0.14225, 0.0),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.692 seconds)


.. _sphx_glr_download_examples_00-basic_05-use_local_data.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 05-use_local_data.py <05-use_local_data.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 05-use_local_data.ipynb <05-use_local_data.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
