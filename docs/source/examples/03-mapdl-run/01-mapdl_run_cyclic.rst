
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "examples\03-mapdl-run\01-mapdl_run_cyclic.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_examples_03-mapdl-run_01-mapdl_run_cyclic.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_examples_03-mapdl-run_01-mapdl_run_cyclic.py:


.. _ref_mapdl_run_cyclic:

Use Mapdl run and get cyclic results
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
This example shows how to make an Mapdl solve and 
how to get the cyclic expanded results. 

.. GENERATED FROM PYTHON SOURCE LINES 12-13

Import dpf module 

.. GENERATED FROM PYTHON SOURCE LINES 13-22

.. code-block:: default


    from ansys.dpf import core as dpf
    from ansys.dpf.core import examples
    from ansys.dpf.core import operators as ops
    from ansys.dpf.core.help import norm, min_max
    import matplotlib.pyplot as plt

    import os








.. GENERATED FROM PYTHON SOURCE LINES 23-26

Run Mapdl
=========
Call mapdl::run operator 

.. GENERATED FROM PYTHON SOURCE LINES 26-29

.. code-block:: default


    mapld_run = dpf.Operator("mapdl::run")








.. GENERATED FROM PYTHON SOURCE LINES 30-31

Get dataSources and connect it to the mapdl::run operator

.. GENERATED FROM PYTHON SOURCE LINES 31-35

.. code-block:: default


    data_sources = dpf.DataSources(examples.cyclic_dat)
    mapld_run.inputs.data_sources.connect(data_sources)








.. GENERATED FROM PYTHON SOURCE LINES 36-37

get the executable path and connect it to the operator

.. GENERATED FROM PYTHON SOURCE LINES 37-46

.. code-block:: default


    ansys_path = dpf.misc.find_ansys()
    if os.name == 'nt':
        executable = os.path.join("winx64", "ansys2021R2.exe")
    elif os.name == 'posix':
        executable = os.path.join("linx64", "ansys2021r2")
    executable_path = os.path.join(ansys_path, "ansys", "bin", executable)
    mapld_run.inputs.mapdl_exe_path(executable_path)








.. GENERATED FROM PYTHON SOURCE LINES 47-48

Run the operator to get the result file path as output

.. GENERATED FROM PYTHON SOURCE LINES 48-51

.. code-block:: default


    rst_data_sources = mapld_run.outputs.data_sources()








.. GENERATED FROM PYTHON SOURCE LINES 52-55

Read results
============
Create a model from result data sources

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: default


    model = dpf.Model(rst_data_sources)









.. GENERATED FROM PYTHON SOURCE LINES 60-61

Elemental nodal stress

.. GENERATED FROM PYTHON SOURCE LINES 61-75

.. code-block:: default


    s = model.operator("mapdl::rst::S_cyclic")
    fcS = s.outputs.fields_container()

    min_max_op = ops.min_max.min_max()
    min_max_op.inputs.field.connect(fcS[0])

    min = min_max_op.outputs.field_min()
    max =  min_max_op.outputs.field_max()

    print(min.data)
    print(max.data)






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [-1.61248919e+16 -7.28265203e+15 -1.61248919e+16 -8.47593888e+15
     -8.47593888e+15 -4.54970995e+15]
    [1.61248919e+16 7.28265203e+15 1.61248919e+16 8.47593888e+15
     8.47593888e+15 4.54970995e+15]




.. GENERATED FROM PYTHON SOURCE LINES 76-77

Displacement

.. GENERATED FROM PYTHON SOURCE LINES 77-96

.. code-block:: default


    u = model.operator("mapdl::rst::U_cyclic")

    timeIds = list(range(1, model.metadata.time_freq_support.n_sets+1))
    timeIds

    u.inputs.time_scoping(timeIds)
    fcU = u.outputs.fields_container()

    min_max_over_time = min_max(norm(u))

    max_disp = min_max_over_time.outputs.field_max()

    print(max_disp.data)

    mesh_provider = model.metadata.mesh_provider
    mesh_provider.inputs.read_cyclic(2)
    mesh = mesh_provider.outputs.mesh()

    mesh.plot(fcU[20])


.. image:: /examples/03-mapdl-run/images/sphx_glr_01-mapdl_run_cyclic_001.png
    :alt: 01 mapdl run cyclic
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [104.95854612  74.39420756 104.64081775 141.36958454 107.45235327
      99.00661151 144.43372448 144.43372448 106.12378246 106.12378246
     157.66304552 157.66304552 134.98799749 134.98799749 113.13774502
     113.13774502 153.02434235 153.02434235 155.8148217  155.8148217
     149.50764353 149.50764353 133.72760243 133.72760243 140.19187955
     110.65183113 102.29003791 144.2702842  128.26583074 116.20410891]

    [(0.012822295764404478, 0.013842295764404478, 0.012822295764404478),
     (0.0, 0.0010200000000000005, 0.0),
     (0.0, 0.0, 1.0)]




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  4.719 seconds)


.. _sphx_glr_download_examples_03-mapdl-run_01-mapdl_run_cyclic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: 01-mapdl_run_cyclic.py <01-mapdl_run_cyclic.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: 01-mapdl_run_cyclic.ipynb <01-mapdl_run_cyclic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
